#version 330 core

in vec2 texCoords;

uniform vec2 resolution; //window resolution 

float getDistance(vec3 point){ //problem here
    vec4 sphere = vec4(0, 0, 0, 300);
    float sphereDist = length(point - sphere.xyz) - sphere.w;

    return sphereDist;
}

bool isInsideSphere(vec3 point){
    float dist = pow(point.x - 0, 2) + pow(point.y - 0, 2) + pow(point.z - 0, 2);
    
    return(sqrt(dist) <= 200);
}

float rayMarch(vec3 rayOrigin, vec3 rayDir){
    float distanceFromOrigin = 0.0;

    for(int i = 0; i < 100; i++){ //100 = MAX_STEPS
        vec3 currentMarchingLocation = rayOrigin + rayDir * distanceFromOrigin;
        float distanceToSurface = getDistance(currentMarchingLocation);
        distanceFromOrigin = distanceFromOrigin + distanceToSurface;

        if(distanceFromOrigin > 100.0 || distanceToSurface < 0.01)
            break;       
    }

    return distanceFromOrigin;
}

void main()
{
    vec2 pixelCoord = gl_FragCoord.xy;
    vec2 uv = vec2(pixelCoord.x - resolution.x/2, pixelCoord.y - resolution.y/2);

    vec3 rayOrigin = vec3(0, 0, 0); 
    vec3 rayDir = normalize(vec3(uv, 1.0f));

    float distanceToSurface = rayMarch(rayOrigin, rayDir);
    distanceToSurface = distanceToSurface / 6;

    vec3 color = vec3(distanceToSurface, distanceToSurface, distanceToSurface);

    gl_FragColor = vec4(color, 1.0);

    if(isInsideSphere(vec3(uv, 1.0f))){
        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
    }
    else{
        gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);
    }
} 